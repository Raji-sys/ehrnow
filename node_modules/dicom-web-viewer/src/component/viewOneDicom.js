/* eslint-disable */
import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import '../App.css';
//import '../compatibility/hammer.js';
//import {cornerstone,cornerstoneTools} from 'cornerstone';


class viewOneDicom extends Component {
    constructor(props) {
        super(props);
        this.state = {
        };
    }

    domFind(id){
        return document.getElementsByClassName(id)
    };

    onImageRendered() {
        const cornerstone = window.cornerstone;
        var domNode = this.domFind(ReactDOM.findDOMNode(this));
        var topLeft = domNode.find(".topLeft");
        var topRight = domNode.find(".topRight");
        var bottomRight = domNode.find(".bottomRight");
        var bottomLeft = domNode.find(".bottomLeft");

        var element = document.getElementsByClassName('viewportElement')[0];
        var viewport = cornerstone.getViewport(element)

        this.setState({
            wwwc: Math.round(viewport.voi.windowWidth) + "/" + Math.round(viewport.voi.windowCenter),
            zoom: viewport.scale.toFixed(2)
        });
    }

    returnFalse(e) {
        e.stopPropagation();
        e.preventDefault();
    }

    handleResize() {
        const cornerstone = window.cornerstone;
        this.updateHeight();
        //var domNode = ReactDOM.findDOMNode(this);
        var element = document.getElementsByClassName('viewportElement')[0];
        cornerstone.resize(element, true);
    }

    updateHeight() {
        var domNode = this.domFind(ReactDOM.findDOMNode(this));
        var container = $(domNode);
        // Subtract the header height and some padding
        var windowHeight = $(window).height() - $("#header").height() - 10 ;
        container.css({
            height: windowHeight
        });
    }

    componentDidMount() {
        const cornerstone = window.cornerstone;
        const cornerstoneTools = window.cornerstoneTools;
        this.updateHeight();
        //var domNode = ReactDOM.findDOMNode(this);
        console.log(document.getElementsByClassName('viewportElement')[0]);

        var element = document.getElementsByClassName('viewportElement')[0];

        this.onImageRendered;
        //element.on("CornerstoneImageRendered", this.onImageRendered);
        window.addEventListener('resize', this.handleResize);



        cornerstone.enable(element);
        //var imageId = "example://1";
        //var imageId ="dicomweb://cornerstonetech.org/images/ClearCanvas/CTStudy/1.2.840.113619.2.30.1.1762295590.1623.978668950.110.dcm";
        var imageId = this.props.web;
        cornerstone.loadImage(imageId).then(function(image) {
            cornerstone.displayImage(element, image);
            cornerstoneTools.mouseInput.enable(element);
            cornerstoneTools.mouseWheelInput.enable(element);
            cornerstoneTools.wwwc.activate(element, 1); // ww/wc is the default tool for left mouse button
            cornerstoneTools.pan.activate(element, 2); // pan is the default tool for middle mouse button
            cornerstoneTools.zoom.activate(element, 4); // zoom is the default tool for right mouse button
            cornerstoneTools.zoomWheel.activate(element); // zoom is the default tool for middle mouse wheel

            cornerstoneTools.touchInput.enable(element);
            cornerstoneTools.panTouchDrag.activate(element);
            cornerstoneTools.zoomTouchPinch.activate(element);
        });
    }

    componentWillUnmount() {
        //var domNode = this.domFind(ReactDOM.findDOMNode(this));
        var element = document.getElementsByClassName('viewportElement')[0];
        element.off("CornerstoneImageRendered", this.onImageRendered);
        window.removeEventListener('resize', this.handleResize);
    }

    render() {
        return (
            <div
                 className='viewportContainer'
                 unselectable='on'
                 onContextMenu={this.returnFalse}
                 //onSelectStart={this.returnFalse}
                 onMouseDown={this.returnFalse}>
                <div className="viewportElement" style={{height:'480px'}}>
                </div>
                <div className="topLeft dicomTag">
                    Patient Name
                </div>
                <div className="topRight dicomTag">
                    Hospital
                </div>
                <div className="bottomRight dicomTag">
                    Zoom: {this.state.zoom}
                </div>
                <div className="bottomLeft dicomTag">
                    WW/WC: {this.state.wwwc}
                </div>
            </div>
        );
    }
}
module.exports = viewOneDicom;

export default viewOneDicom;
